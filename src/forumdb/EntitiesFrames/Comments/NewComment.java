
package forumdb.EntitiesFrames.Comments;

import EntitiesClasses.Comments;
import EntitiesClasses.Post;
import EntitiesClasses.Customer;
import Help.JTextFieldLimit;
import forumdb.EntitiesFrames.Customer.NewCustomer;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.text.AbstractDocument;

public class NewComment extends javax.swing.JDialog {

    Connection c;
    Comments editItem;
    CommentsModel model;
    List<Post> posts;
    List<Comments> comments;
    List<Customer> customer;

    public NewComment(java.awt.Frame parent, boolean modal, Connection c) {
        super(parent, modal);
        initComponents();
        this.c = c;
        model = new CommentsModel(c); 
        editItem = null;
        combos();
    }

    public NewComment(java.awt.Frame parent, boolean modal, Connection c, Comments u) {
        super(parent, modal);
        initComponents();
        this.c = c;
        editItem = u;
        combos();
        fillFields();
    }

    private void combos() {
        ((AbstractDocument) text.getDocument()).setDocumentFilter(new JTextFieldLimit(1024));

        posts = new ArrayList<>();
        comments = new ArrayList<>();
        customer = new ArrayList<>();

        try {
            Statement statement = c.createStatement();
            ResultSet rs = statement.executeQuery("SELECT * FROM \"Post\"");
            while (rs.next()) {
                Post item = new Post(rs.getInt("ID_post"), rs.getInt("ID_cust"), rs.getInt("ID_sect"), rs.getString("Text"));

                posts.add(item);
            }
            post.setModel(new DefaultComboBoxModel(posts.toArray()));

            rs = statement.executeQuery("SELECT * FROM \"Customer\"");
            while (rs.next()) {
                Customer item = new Customer(rs.getInt("ID_cust"), rs.getString("Login"), rs.getString("Password"),
                        rs.getInt("ID_role"), rs.getString("Family"),
                        rs.getString("Name"), rs.getString("Patronymic"), rs.getString("Email"));
                customer.add(item);
            }
            user.setModel(new DefaultComboBoxModel(customer.toArray()));

            comments.add(null);
            String sql = "SELECT * FROM \"Comments\" where \"ID_post\"="+((Post) post.getSelectedItem()).getID_post() +";";
            rs = statement.executeQuery(sql);
            while (rs.next()) {
                Comments item = new Comments(rs.getInt("ID_com"), rs.getInt("ID_post"), rs.getInt("ID_cust"), rs.getInt("ID_prev"), rs.getString("Comment"));

                comments.add(item);
            }
            comment.setModel(model.getComboBoxModelByPostId(((Post) post.getSelectedItem()).getID_post()));  //new DefaultComboBoxModel(comments.toArray())
        } catch (SQLException ex) {
            Logger.getLogger(NewCustomer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void fillFields() {
        text.setText(editItem.getComment());

        post.setSelectedItem(-1);
        comment.setSelectedItem(-1);
        user.setSelectedItem(-1);

        for (Post s : posts) {
            if (s.getID_post() == editItem.getID_post()) {
                post.setSelectedItem((s));
            }
        }
        for (Comments s : comments) {
            if (s != null && s.getID_com() == editItem.getID_prev()) {
                comment.setSelectedItem((s));
            }
        }
        for (Customer s : customer) {
            if (s.getID_cust() == editItem.getID_cust()) {
                user.setSelectedItem((s));
            }
        }
    }

    public boolean check() {
        if ("".equals(text.getText())) {
            JOptionPane.showMessageDialog(new JFrame(), "Text cannot be empty");
            return false;
        }
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        text = new javax.swing.JTextArea();
        post = new javax.swing.JComboBox<>();
        comment = new javax.swing.JComboBox<>();
        user = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("New comment");

        text.setColumns(20);
        text.setRows(5);
        jScrollPane1.setViewportView(text);

        post.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postActionPerformed(evt);
            }
        });

        user.setMaximumSize(new java.awt.Dimension(167, 167));

        jButton1.setText("Done");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Comment text");

        jLabel2.setText("Post");

        jLabel3.setText("Prev");

        jLabel4.setText("User");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(user, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comment, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(post, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(post, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(27, 27, 27)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        if (!check()) {
            return;
        }
        try {
            // TODO add your handling code here:
//            Statement statement = c.createStatement();
            if (editItem == null) {
                model.create(new Comments(0, ((Post) post.getSelectedItem()).getID_post(), ((Customer) user.getSelectedItem()).getID_cust(), 
                        ((Comments) comment.getSelectedItem()).getID_prev(), text.getText()));
            } else {
                model.update(new Comments(editItem.getID_com(), ((Post) post.getSelectedItem()).getID_post(), ((Customer) user.getSelectedItem()).getID_cust(), 
                        ((Comments) comment.getSelectedItem()).getID_prev(), text.getText()));
            }
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(new JFrame(), ex.getMessage());
            return;
        }
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void postActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postActionPerformed
        // TODO add your handling code here:
        comments = new ArrayList<>();

        try {
            Statement statement = c.createStatement();
            ResultSet rs ;
            comments.add(null);
            rs = statement.executeQuery("SELECT * FROM \"Comments\" where \"ID_post\"="+((Post) post.getSelectedItem()).getID_post() +";");
            while (rs.next()) {
                Comments item = new Comments(rs.getInt("ID_com"), rs.getInt("ID_post"), rs.getInt("ID_cust"), rs.getInt("ID_prev"), rs.getString("Comment"));

                comments.add(item);
            }
            comment.setModel(new DefaultComboBoxModel(comments.toArray()));
        } catch (SQLException ex) {
            Logger.getLogger(NewCustomer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_postActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(NewComment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(NewComment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(NewComment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(NewComment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                NewComment dialog = new NewComment(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comment;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> post;
    private javax.swing.JTextArea text;
    private javax.swing.JComboBox<String> user;
    // End of variables declaration//GEN-END:variables
}
